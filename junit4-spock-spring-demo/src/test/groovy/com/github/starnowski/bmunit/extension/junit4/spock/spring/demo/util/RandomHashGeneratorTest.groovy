package com.github.starnowski.bmunit.extension.junit4.spock.spring.demo.util

import com.github.starnowski.bmunit.extension.junit4.rule.BMUnitMethodRule
import org.jboss.byteman.contrib.bmunit.BMRule
import org.jboss.byteman.contrib.bmunit.BMUnitConfig
import org.junit.Rule
import spock.lang.Specification
import spock.lang.Unroll

@BMUnitConfig(verbose = true)
class RandomHashGeneratorTest extends Specification {

    @Rule
    public BMUnitMethodRule bmUnitMethodRule = new BMUnitMethodRule()

    def tested = new RandomHashGenerator()

    @Unroll
    @BMRule(name = "mocking method java.util.UUID#toString()", targetClass = "com.github.starnowski.bmunit.extension.junit4.spock.spring.demo.util.RandomHashGenerator",
    targetMethod = "compute()", helper = "com.github.starnowski.bmunit.extension.junit4.spock.spring.demo.util.BMUnitHelperWithStaticStringProperty",
    targetLocation = "AFTER INVOKE UUID.toString()", action = "\$! = getStaticStringProperty()")
    def "should return string representation of value, generated by method java.util.UUID#randomUUID()" ()
    {
        given:
            BMUnitHelperWithStaticStringProperty.setStaticStringProperty(expectedValue)

        when:
            def result = tested.compute()

        then:
            result == expectedValue

        where:
            expectedValue   << ["", "TEST-12", "13-ASDF-ZC-ASFFA"]
    }
}
